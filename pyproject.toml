[tool.poetry]
name = "d2rl"
version = "0.1.0"
description = "Simple implementations of distributed, recurrent neural network (RNN) based deep reinforcement learning algorithms."
authors = ["Jonathon Schwartz <Jonathon.schwartz@anu.edu.au>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9, <3.11"
wandb = "^0.15"
# needed so torch install properly with poetry
# torch = [
#   {url = "https://download.pytorch.org/whl/cu117/torch-2.0.1%2Bcu117-cp39-cp39-linux_x86_64.whl", markers = "sys_platform == 'linux'"}
# ]
numpy = ">=1.24"
gymnasium = {extras = ["atari", "box2d", "classic_control", "toy_text", "accept-rom-license", "other"], version = ">=0.28.1"}
tensorboard = "^2.13.0"

# A list of all of the optional dependencies, some of which are included in the
# below `extras`. They can be opted into by apps.
matplotlib = {version = "^3.7.1", optional = true}
pandas = {version = "^2.0.1", optional = true}
seaborn = {version = "^0.12.2", optional = true}
minigrid = {version = ">=2.0", optional = true}


[tool.poetry.extras]
plot = ["matplotlib", "pandas", "seaborn"]
minigrid = ["minigrid"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# Linters and Test tools #######################################################

[tool.black]
safe = true
line-length = 88

[tool.ruff]
# https://beta.ruff.rs/docs/settings/
src = ["porl"]
extend-select = ["C4", "SIM", "TCH"]
show-fixes = true
# Same as Black.
line-length = 88
# Assume Python 3.9.
target-version = "py39"


[tool.ruff.per-file-ignores]
# Ignore `F401` (import violations) in all `__init__.py` files,
"__init__.py" = ["F401", "E402"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
lines-after-imports = 2
extra-standard-library = ["typing_extensions"]

[tool.pyright]
include = ["porl/**"]
exclude = ["**/__pycache__"]
strict = []

typeCheckingMode = "basic"
pythonVersion = "3.9"
pythonPlatform = "All"
typeshedPath = "typeshed"
enableTypeIgnoreComments = true

# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame, box2d)
#   Therefore, we have to ignore missing imports
reportMissingImports = "none"
# Some modules are missing type stubs, which is an issue when running pyright locally
reportMissingTypeStubs = false
# For warning and error, will raise an error when
reportInvalidTypeVarUse = "none"


# reportUnknownMemberType = "warning"  # -> raises 6035 warnings
# reportUnknownParameterType = "warning"  # -> raises 1327 warnings
# reportUnknownVariableType = "warning"  # -> raises 2585 warnings
# reportUnknownArgumentType = "warning"  # -> raises 2104 warnings
reportGeneralTypeIssues = "none"  # -> commented out raises 489 errors
reportUntypedFunctionDecorator = "none"  # -> pytest.mark.parameterize issues

reportPrivateImportUsage = "none"
reportPrivateUsage = "warning"
reportUnboundVariable = "warning"

