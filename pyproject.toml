# Package ######################################################################

[build-system]
requires = ["setuptools >= 61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "minidrl"
description = "Minimal, high-quality implementations of distributed, Deep Reinforcement Learning algorithms."
authors = [
  { name = "Jonathon Schwartz", email = "jonathon.schwartz@anu.edu.au" },
]
license = { text = "MIT License" }
readme = "README.md"
requires-python = ">= 3.9"
classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  'Intended Audience :: Science/Research',
  'Topic :: Scientific/Engineering :: Artificial Intelligence',
]
dependencies = [
  "gymnasium >=0.28.1",
  "numpy >=1.24.0",
  "typing-extensions >=4.3.0",
  "importlib-metadata >=4.8.0; python_version < '3.10'",
  "torch >=2.0.0",
  "wandb >=0.15",
  "tensorboard >=2.13.0",
]
dynamic = ["version"]


[project.optional-dependencies]
plots = ["matplotlib >=3.7.1", "pandas >=2.0.1", "seaborn >=0.12.2"]
minigrid = ["minigrid >=2.0"]
atari = ["gymnasium[atari,accept-rom-license] >=0.28.1"]
all = [
  # Dependencies for all types above
  "matplotlib >=3.7.1",
  "pandas >=2.0.1",
  "seaborn >=0.12.2",
  "minigrid >=2.0",
  "gymnasium[atari,accept-rom-license] >=0.28.1",
]

[project.urls]
Homepage = "https://github.com/Jjschwartz/miniDRL"
Repository = "https://github.com/Jjschwartz/miniDRL"
"Bug Report" = "https://github.com/Jjschwartz/miniDRL/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["minidrl", "minidrl.*"]

[tool.setuptools.package-data]
minidrl = ["py.typed"]

# Linters and Test tools #######################################################

[tool.black]
safe = true
line-length = 88

[tool.ruff]
# https://beta.ruff.rs/docs/settings/
src = ["minidrl", "tests"]
extend-select = ["C4", "SIM", "TCH"]
show-fixes = true
# Same as Black.
line-length = 88
# Assume Python 3.10.
target-version = "py310"


[tool.ruff.per-file-ignores]
# Ignore `F401` (import violations) in all `__init__.py` files,
"__init__.py" = ["F401", "E402"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
lines-after-imports = 2
extra-standard-library = ["typing_extensions"]

[tool.pyright]
include = ["minidrl/**"]
exclude = ["**/__pycache__"]
strict = []

typeCheckingMode = "basic"
pythonVersion = "3.10"
pythonPlatform = "All"
typeshedPath = "typeshed"
enableTypeIgnoreComments = true

# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame, box2d)
#   Therefore, we have to ignore missing imports
reportMissingImports = "none"
# Some modules are missing type stubs, which is an issue when running pyright locally
reportMissingTypeStubs = false
# For warning and error, will raise an error when
reportInvalidTypeVarUse = "none"


# reportUnknownMemberType = "warning"  # -> raises 6035 warnings
# reportUnknownParameterType = "warning"  # -> raises 1327 warnings
# reportUnknownVariableType = "warning"  # -> raises 2585 warnings
# reportUnknownArgumentType = "warning"  # -> raises 2104 warnings
reportGeneralTypeIssues = "none"        # -> commented out raises 489 errors
reportUntypedFunctionDecorator = "none" # -> pytest.mark.parameterize issues

reportPrivateImportUsage = "none"
reportPrivateUsage = "warning"
reportUnboundVariable = "warning"
